//===--- Counted.swift ----------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
% for Bidirectional in '', 'Bidirectional':
/// Adds a stored `count` to the given `Base` collection so that the cost of
/// counting it is not repeated.
public struct ${Bidirectional}Counted<Base_: ${Bidirectional}Collection> {
  public var base: Base_
  public let count: Base.IndexDistance
}

extension ${Bidirectional}Counted : ${Bidirectional}CollectionWrapper {
  public typealias Base = Base_
  public typealias Index = Base.Index
  public typealias IndexDistance = Base.IndexDistance
}

extension ${Bidirectional}Counted : ${Bidirectional}Collection {
  /// Constructs a copy of `base` and stores its `count`
  public init(_ base: Base) {
    self.base = base
    self.count = base.count
  }

  /// Constructs a copy of `base` with the given stored `count`
  ///
  /// - Precondition: `count == base.count`
  public init(_ base: Base, count: Base.IndexDistance) {
    _debugPrecondition(
      count == base.count, "misstated count of base collection")
    self.base = base
    self.count = count
  }
  
  public var underestimatedCount: Int {
    return numericCast(count)
  }
}
% end
